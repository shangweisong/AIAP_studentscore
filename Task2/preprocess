import sqlite3
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder

def load_data_from_sqlite(db_path, query):
    """
    Connects to the SQLite database and loads data based on the query provided.
    Args:
    - db_path: Path to the SQLite database file.
    - query: SQL query to fetch data from the database.
    
    Returns:
    - DataFrame containing the queried data.
    """
    conn = sqlite3.connect(db_path)
    data = pd.read_sql(query, conn)
    conn.close()
    return data

def preprocess_data(db_path, query):
    # Load data from SQLite database using the provided query
    data = load_data_from_sqlite(db_path, query)

    # Fill missing values
    data.fillna(data.mean(), inplace=True)

    # Encode categorical variables (if applicable)
    le = LabelEncoder()
    if 'your_categorical_column' in data.columns:  # Replace with actual column names
        data['your_categorical_column'] = le.fit_transform(data['your_categorical_column'])
    
    return data

def split_data(data):
    X = data.drop(columns=['target_column'])  # Replace with actual target column name
    y = data['target_column']  # Replace with actual target column name
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)
    return X_train, X_test, y_train, y_test, scaler

def save_scaler(scaler, filename):
    import joblib
    joblib.dump(scaler, filename)